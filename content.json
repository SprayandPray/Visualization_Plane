{"meta":{"title":"Plane_crash","subtitle":"The visualization of plane crash data","description":"Visualization, Msc group porject","author":"Wang Xichen, Feng Jiayu, He Zhaoxuan","url":"https://sprayandpray.github.io/Visualization_Plane","root":"/Visualization_Plane/"},"pages":[{"title":"About","date":"2019-04-21T06:21:53.529Z","updated":"2019-04-21T06:21:53.524Z","comments":true,"path":"about/index.html","permalink":"https://sprayandpray.github.io/Visualization_Plane/about/index.html","excerpt":"","text":"Group 15 Member####WANG, XICHEN 3035561974 ####Fung Ka Yue 3035074634 ####He ZhaoXuan 3035561699 Our website is published at Github! Welcome to visit it and check out the full version of our report!##Foreword The goal of this project is to identify trends/patterns of big plane crashes, by visualizing data of plane crashes over time and locations. We are looking forward to finding some inspirations by analyzing the number of crashes distributed in different time, location and so on. The death rate of the crash is our point as well. We managed to derive the relationship between the rate and specific factor. Tools we use Python：Python has been used for data scraping and cleaning. It provides us with a great way to gain more data, and process data more efficiently. Tableau：Use the powerful data processing software to visualize and put the animation on the public server. We aim to provide a set of intuitive and interactive visualization to help users understand more of data. D3: D3.js is open-source and has a large user community.Visualizations are fully customizable. Possible to create highly interactive displays of data. Website: Node.js brings incredible generating speed. Hundreds of files take only seconds to build.Hexo is a fast, simple &amp; powerful blog framework, which helps us input command to deploy website to GitHub Pages. CourseCOMP7507 Visualization and visual analytics Connectcsdan@connect.hku.hk Your comments are welcome."},{"title":"Report","date":"2019-04-18T14:43:40.000Z","updated":"2019-04-21T06:07:41.931Z","comments":true,"path":"report/index.html","permalink":"https://sprayandpray.github.io/Visualization_Plane/report/index.html","excerpt":"","text":"Welcome to visit HERE and check out the full version of our report!"}],"posts":[{"title":"1.A Glimpse to Distribution of Plane Crash","slug":"A-Glimpse-to-our-Data","date":"2019-04-17T13:12:46.000Z","updated":"2019-04-21T02:15:25.915Z","comments":true,"path":"2019/04/17/A-Glimpse-to-our-Data/","link":"","permalink":"https://sprayandpray.github.io/Visualization_Plane/2019/04/17/A-Glimpse-to-our-Data/","excerpt":"","text":"The graph below illustrates the distribution of plane accidents across locations over the recent 20 years. Higher color intensity in the graph represents higher frequnecy of accidents. It is found that the United States has the largest number of plane accidents, followed by Russia and Canada. var divElement = document.getElementById('viz1555681189974'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); The treemap below further supports the findings that the United States has the largest number of plane accidents. These graphs may also suggest that the United States has more flight activities than other countries. var divElement = document.getElementById('viz1555644427557'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); The map below further presents the yearly distribution of plane accidents across locations. (1998-2018) Users can adjust the year of the distribution by sliding the right bar. The United States has the largest number of plane accidents in all the 20 years. var divElement = document.getElementById('viz1555681639988'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement);","categories":[],"tags":[]},{"title":"2.Further Analysis of Accidents","slug":"Further-Analysis-of-Accidents","date":"2019-04-16T14:06:11.000Z","updated":"2019-04-21T02:53:48.625Z","comments":true,"path":"2019/04/16/Further-Analysis-of-Accidents/","link":"","permalink":"https://sprayandpray.github.io/Visualization_Plane/2019/04/16/Further-Analysis-of-Accidents/","excerpt":"","text":"The 2 graphs below displays frequency of plane accidents and total number of fatalities in each sizes of plane, over the recent 20 years. X-axis and Y-axis of the graph represents year and frequency of plane accidents respectively. Size of plane is determined by the number of people onboard. 3 different plane sizes (Large, Medium, Small) are defined and separated by colors. The colors shown in the graph represent:-Blue： Large planes, number of people onboard &gt; 50-Red： Medium planes, 50 &gt; Number of people onboard &gt; 2-Yellow： Small planes, number of people onboard = 1 or 2 Medium plane has the highest number of plane accidents, while large planes tend to have the highest number of fatalities each year. The below trend suggests that a large proportion of total fatalities every year comes from accidents of large planes. Although accidents of small and medium planes are more frequent than that of large planes, accidents of plarge planes can be more devastating, because of the larger passenger capacity. var divElement = document.getElementById('viz1555684706000'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); Number of plane accidents and total fatalities by plane nature is displayed on the graphs below. Plane nature is separated into 4 categories: 1) Passengers, 2) Military, 3) Cargo, 4) Others. It can be seen from the graph that a large proportion of plane accidents and fatalities is linked to passenger planes. One of the possible explanations is that the majority of flight serves the purpose of carrying passengers, which may lead to higher number of accidents. Moreover, pilots in military planes can be more skilful, which results in fewer fatalities. var divElement = document.getElementById('viz1555685871896'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); Show the top airlines with the most accidents. The first two lines are private plane and US military aircraft.This is reasonable and consistent with the previous findings. Private small planes are more prone to occur accidents, while military aircraft are more likely to have trouble in harsh environments. Only the top fifteen are listed. You can see that American Airlines is the business compony with the most accidents. var divElement = document.getElementById('viz1555767987729'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement);","categories":[],"tags":[]},{"title":"3.The Correlation of Factors with Death Rate","slug":"The-Correlation-of-Factors-with-Death-Rate","date":"2019-04-15T12:45:40.000Z","updated":"2019-04-21T02:22:31.629Z","comments":true,"path":"2019/04/15/The-Correlation-of-Factors-with-Death-Rate/","link":"","permalink":"https://sprayandpray.github.io/Visualization_Plane/2019/04/15/The-Correlation-of-Factors-with-Death-Rate/","excerpt":"","text":"The graph below illustrates the relationship between the severity of plane accidents and number of people onboard. X-axis and Y-axis contain the number of passengers and severity respectively. Severity of each accidents is defined by its mortality rate. A mortality rate of &gt;80% is considered as catastrophic. It is suggested that proportion of catastrophic accidents decreases as the number of people onboard increase. Large planes tend to have fewer accidents of large mortality rate. One of the possible reasons for this observation is that catastrophic accident is defined by proportion of mortality rate. As small planes have fewer passengers, accidents in small planes are more likely to be classified as catastrophic. var divElement = document.getElementById('viz1555750550491'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); The graph shows the relationship of flying hours with the occurence of catastrophic accidents. Y-axis represents the ratio of number of non-catastrophic and catastrophic accidents. (Ratio of number of accidents with small mortality rate and high mortality rate) Plane with more flying hours tend to have fewer catastrophic accidents than new planes. It can be suggested from the finding that planes with more flying hours tend to be more stable. New planes can be more susceptible to errors because errors may not be found within a short flight time. var divElement = document.getElementById('viz1555767208814'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); Correlation of crew and passenger survival rate is analyzed with the following graph. Survival rate, which is defined by number of fatalities / total number of people onboard, is calculated for each accidents. Crew and passenger survival rate are then plotted to analyze their correlations. There is a positive correlation between crew and passenger survival rate. This suggests that passengers are less likely to survive in an accident if most crews cannot survive. The key message is that survivability of crew is important to that of the passengers. In order to reduce the number of fatalities of passengers, it is essential to increase the survivability of crews. var divElement = document.getElementById('viz1555757388625'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); Another heat map is generated to further investigate the relationship between crew and passenger survival rate. It is noted that most of the data points cluster around (0%,0%) and (98%,100%). This suggests that most of the plane accidents have either 0 fatalities, or a large mortality rate. The heat map further reinforces the idea that the survivability of crew members are important to the survivability of passengers. var divElement = document.getElementById('viz1555644891030'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement);","categories":[],"tags":[]},{"title":"4.Accident Cause Analysis","slug":"Accident-cause-analysis","date":"2019-04-14T03:11:37.000Z","updated":"2019-04-21T06:19:19.095Z","comments":true,"path":"2019/04/14/Accident-cause-analysis/","link":"","permalink":"https://sprayandpray.github.io/Visualization_Plane/2019/04/14/Accident-cause-analysis/","excerpt":"","text":"This figure shows the proportion of the cause of the accident. It can be seen that the top four main reasons are Hijack, Airframe, Engine, and Storm, which account for more than 65% of the total. var divElement = document.getElementById('viz1555818665515'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement); This is the Sunburst Graph of the cause of the accident. It is hierarchical. We summarize the three main subjects, then divide it and sort the collected causes into secondary and tertiary tags. The size of the roulette represents the proportion of the same level. Move the pointer to see the data and scale represented by each tile clearly. of crashes caused by this sequence of reason Legend var width = 750; var height = 600; var radius = Math.min(width, height) / 2; // Breadcrumb dimensions: width, height, spacing, width of tip/tail. var b = { w: 75, h: 30, s: 3, t: 10 }; // Mapping of step names to colors. var colors = { \"Human\": \"#068c49\", \"Aircraft\": \"#4f91bc\", \"Natural\": \"#ff6a6a\", \"Hijack\": \"#3eb37e\", \"Shot\": \"#80cc62\", \"Crew\": \"#85cc85\", \"Technique\": \"#ccd1cb\", \"Behaviour\": \"#9bd3b2\", \"Weather\": \"#e57e8c\", \"Bird\": \"#ffa1a1\", \"Storm\": \"#e58acf\", \"Others\": \"#cc99b2\", \"Software\": \"#7baea5\", \"Hardware\": \"#52ace8\", \"Engine\": \"#4da7b5\", \"Gear\": \"#9eb3cc\" }; // Total size of all segments; we set this later, after loading the data. var totalSize = 0; var vis = d3.select(\"#chart\").append(\"svg:svg\") .attr(\"width\", width) .attr(\"height\", height) .append(\"svg:g\") .attr(\"id\", \"container\") .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); var partition = d3.partition() .size([2 * Math.PI, radius * radius]); var arc = d3.arc() .startAngle(function(d) { return d.x0; }) .endAngle(function(d) { return d.x1; }) .innerRadius(function(d) { return Math.sqrt(d.y0); }) .outerRadius(function(d) { return Math.sqrt(d.y1); }); // Use d3.text and d3.csvParseRows so that we do not need to have a header // row, and can receive the csv as an array of arrays. d3.text(\"crash_cause_sunburst.csv\", function(text) { var csv = d3.csvParseRows(text); var json = buildHierarchy(csv); createVisualization(json); }); // Main function to draw and set up the visualization, once we have the data. function createVisualization(json) { // Basic setup of page elements. initializeBreadcrumbTrail(); drawLegend(); d3.select(\"#togglelegend\").on(\"click\", toggleLegend); // Bounding circle underneath the sunburst, to make it easier to detect // when the mouse leaves the parent g. vis.append(\"svg:circle\") .attr(\"r\", radius) .style(\"opacity\", 0); // Turn the data into a d3 hierarchy and calculate the sums. var root = d3.hierarchy(json) .sum(function(d) { return d.size; }) .sort(function(a, b) { return b.value - a.value; }); // For efficiency, filter nodes to keep only those large enough to see. var nodes = partition(root).descendants() .filter(function(d) { return (d.x1 - d.x0 > 0.005); // 0.005 radians = 0.29 degrees }); var path = vis.data([json]).selectAll(\"path\") .data(nodes) .enter().append(\"svg:path\") .attr(\"display\", function(d) { return d.depth ? null : \"none\"; }) .attr(\"d\", arc) .attr(\"fill-rule\", \"evenodd\") .style(\"fill\", function(d) { return colors[d.data.name]; }) .style(\"opacity\", 1) .on(\"mouseover\", mouseover); // Add the mouseleave handler to the bounding circle. d3.select(\"#container\").on(\"mouseleave\", mouseleave); // Get total size of the tree = value of root node from partition. totalSize = path.datum().value; }; // Fade all but the current sequence, and show it in the breadcrumb trail. function mouseover(d) { var percentage = (100 * d.value / totalSize).toPrecision(3); var percentageString = percentage + \"%\"; if (percentage < 0.1) { percentageString = \"< 0.1%\"; } d3.select(\"#percentage\") .text(percentageString); d3.select(\"#explanation\") .style(\"visibility\", \"\"); var sequenceArray = d.ancestors().reverse(); sequenceArray.shift(); // remove root node from the array updateBreadcrumbs(sequenceArray, percentageString); // Fade all the segments. d3.selectAll(\"path\") .style(\"opacity\", 0.3); // Then highlight only those that are an ancestor of the current segment. vis.selectAll(\"path\") .filter(function(node) { return (sequenceArray.indexOf(node) >= 0); }) .style(\"opacity\", 1); } // Restore everything to full opacity when moving off the visualization. function mouseleave(d) { // Hide the breadcrumb trail d3.select(\"#trail\") .style(\"visibility\", \"hidden\"); // Deactivate all segments during transition. d3.selectAll(\"path\").on(\"mouseover\", null); // Transition each segment to full opacity and then reactivate it. d3.selectAll(\"path\") .transition() .duration(1000) .style(\"opacity\", 1) .on(\"end\", function() { d3.select(this).on(\"mouseover\", mouseover); }); d3.select(\"#explanation\") .style(\"visibility\", \"hidden\"); } function initializeBreadcrumbTrail() { // Add the svg area. var trail = d3.select(\"#sequence\").append(\"svg:svg\") .attr(\"width\", width) .attr(\"height\", 50) .attr(\"id\", \"trail\"); // Add the label at the end, for the percentage. trail.append(\"svg:text\") .attr(\"id\", \"endlabel\") .style(\"fill\", \"#000\"); } // Generate a string that describes the points of a breadcrumb polygon. function breadcrumbPoints(d, i) { var points = []; points.push(\"0,0\"); points.push(b.w + \",0\"); points.push(b.w + b.t + \",\" + (b.h / 2)); points.push(b.w + \",\" + b.h); points.push(\"0,\" + b.h); if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex. points.push(b.t + \",\" + (b.h / 2)); } return points.join(\" \"); } // Update the breadcrumb trail to show the current sequence and percentage. function updateBreadcrumbs(nodeArray, percentageString) { // Data join; key function combines name and depth (= position in sequence). var trail = d3.select(\"#trail\") .selectAll(\"g\") .data(nodeArray, function(d) { return d.data.name + d.depth; }); // Remove exiting nodes. trail.exit().remove(); // Add breadcrumb and label for entering nodes. var entering = trail.enter().append(\"svg:g\"); entering.append(\"svg:polygon\") .attr(\"points\", breadcrumbPoints) .style(\"fill\", function(d) { return colors[d.data.name]; }); entering.append(\"svg:text\") .attr(\"x\", (b.w + b.t) / 2) .attr(\"y\", b.h / 2) .attr(\"dy\", \"0.35em\") .attr(\"text-anchor\", \"middle\") .text(function(d) { return d.data.name; }); // Merge enter and update selections; set position for all nodes. entering.merge(trail).attr(\"transform\", function(d, i) { return \"translate(\" + i * (b.w + b.s) + \", 0)\"; }); // Now move and update the percentage at the end. d3.select(\"#trail\").select(\"#endlabel\") .attr(\"x\", (nodeArray.length + 0.5) * (b.w + b.s)) .attr(\"y\", b.h / 2) .attr(\"dy\", \"0.35em\") .attr(\"text-anchor\", \"middle\") .text(percentageString); // Make the breadcrumb trail visible, if it's hidden. d3.select(\"#trail\") .style(\"visibility\", \"\"); } function drawLegend() { // Dimensions of legend item: width, height, spacing, radius of rounded rect. var li = { w: 75, h: 30, s: 3, r: 3 }; var legend = d3.select(\"#legend\").append(\"svg:svg\") .attr(\"width\", li.w) .attr(\"height\", d3.keys(colors).length * (li.h + li.s)); var g = legend.selectAll(\"g\") .data(d3.entries(colors)) .enter().append(\"svg:g\") .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * (li.h + li.s) + \")\"; }); g.append(\"svg:rect\") .attr(\"rx\", li.r) .attr(\"ry\", li.r) .attr(\"width\", li.w) .attr(\"height\", li.h) .style(\"fill\", function(d) { return d.value; }); g.append(\"svg:text\") .attr(\"x\", li.w / 2) .attr(\"y\", li.h / 2) .attr(\"dy\", \"0.35em\") .attr(\"text-anchor\", \"middle\") .text(function(d) { return d.key; }); } function toggleLegend() { var legend = d3.select(\"#legend\"); if (legend.style(\"visibility\") == \"hidden\") { legend.style(\"visibility\", \"\"); } else { legend.style(\"visibility\", \"hidden\"); } } // Take a 2-column CSV and transform it into a hierarchical structure suitable // for a partition layout. The first column is a sequence of step names, from // root to leaf, separated by hyphens. The second column is a count of how // often that sequence occurred. function buildHierarchy(csv) { var root = {\"name\": \"root\", \"children\": []}; for (var i = 0; i < csv.length; i++) { var sequence = csv[i][0]; var size = +csv[i][1]; if (isNaN(size)) { // e.g. if this is a header row continue; } var parts = sequence.split(\"-\"); var currentNode = root; for (var j = 0; j < parts.length; j++) { var children = currentNode[\"children\"]; var nodeName = parts[j]; var childNode; if (j + 1 < parts.length) { // Not yet at the end of the sequence; move down the tree. var foundChild = false; for (var k = 0; k < children.length; k++) { if (children[k][\"name\"] == nodeName) { childNode = children[k]; foundChild = true; break; } } // If we don't already have a child node for this branch, create it. if (!foundChild) { childNode = {\"name\": nodeName, \"children\": []}; children.push(childNode); } currentNode = childNode; } else { // Reached the end of the sequence; create a leaf node. childNode = {\"name\": nodeName, \"size\": size}; children.push(childNode); } } } return root; }; // Hack to make this example display correctly in an iframe on bl.ocks.org d3.select(self.frameElement).style(\"height\", \"700px\");","categories":[],"tags":[]},{"title":"5.about","slug":"about","date":"2019-04-11T15:34:02.000Z","updated":"2019-04-21T06:19:05.791Z","comments":true,"path":"2019/04/11/about/","link":"","permalink":"https://sprayandpray.github.io/Visualization_Plane/2019/04/11/about/","excerpt":"","text":"Group 15 Member####WANG, XICHEN 3035561974 ####Fung Ka Yue 3035074634 ####He ZhaoXuan 3035561699 Our website is published at Github! Welcome to visit it and check out the full version of our report!##Foreword The goal of this project is to identify trends/patterns of big plane crashes, by visualizing data of plane crashes over time and locations. We are looking forward to finding some inspirations by analyzing the number of crashes distributed in different time, location and so on. The death rate of the crash is our point as well. We managed to derive the relationship between the rate and specific factor. Tools we use Python：Python has been used for data scraping and cleaning. It provides us with a great way to gain more data, and process data more efficiently. Tableau：Use the powerful data processing software to visualize and put the animation on the public server. We aim to provide a set of intuitive and interactive visualization to help users understand more of data. D3: D3.js is open-source and has a large user community.Visualizations are fully customizable. Possible to create highly interactive displays of data. Website: Node.js brings incredible generating speed. Hundreds of files take only seconds to build.Hexo is a fast, simple &amp; powerful blog framework, which helps us input command to deploy website to GitHub Pages. CourseCOMP7507 Visualization and visual analytics Connectcsdan@connect.hku.hk Your comments are welcome.","categories":[],"tags":[]}]}